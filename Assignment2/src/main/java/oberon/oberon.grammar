%package "oberon-0";
%class "OberonParser";

%terminals LETTER, DIGIT;
%terminals MULT, DIV, MOD, AND, PLUS, MIN, OR;
%terminals EQ, HASHTAG, LT, LEQ, GT, GEQ, DOT, COMMA, COLON, RPAREN, RBRACK;
%terminals OF, THEN, DO, LPAREN, LBRACK, TILDE, ASSIGN, SEMICOLON;
%terminals END, ELSE, ELSIF, IF, WHILE;
%terminals ARRAY, RECORD, CONST, TYPE, VAR, PROCEDURE, BEGIN, MODULE;

%goal module;


ident
    = LETTER
    | LETTER LETTER
    | LETTER DIGIT
    ;

integer
    = DIGIT
    | DIGIT DIGIT
    ;

selector =
    ( DOT ident
    | LBRACK expression RBRACK
    )*
    ;

number = integer;

factor
    = ident selector
    | number
    | LPAREN expression RPAREN
    | TILDE factor
    ;

term
    = factor    ( MULT factor
                | DIV factor
                | MOD factor
                | AND factor
                )*
    ;

simpleexp = ( PLUS | MIN )? term ((PLUS | MIN | OR) term)*;

expression = simpleexp ((EQ | HASHTAG | LT | LEQ | GT | GEQ) simpleexp)?;

assignment = ident selector ASSIGN expression;

actualpar = LPAREN (expression (COMMA expression)*)? RPAREN;

proccall = ident selector (actualpar)?;

ifstatement = IF expression THEN statementseq elsifstatement* elsestatement? END;

elsifstatement = ELSIF expression THEN statementseq;

elsestatement = ELSE statementseq;

whilestatement = WHILE expression DO statementseq END;

statement = (assignment | proccall | ifstatement | whilestatement)?;

statementseq = statement (SEMICOLON statement)*;

identlist = ident (COMMA ident)*;

arraytype = ARRAY expression OF type;

fieldlist = (identlist COLON type)?;

recordtype = RECORD fieldlist (SEMICOLON fieldlist)* END;

type
    = ident
    | arraytype
    | recordtype
    ;

fpsection = (VAR)? identlist COLON TYPE;

formalpar = LPAREN (fpsection (SEMICOLON fpsection)*)? RPAREN;

prochead = PROCEDURE ident (formalpar)?;

procbody = declarations (BEGIN statementseq)? END ident;

procdecl = prochead SEMICOLON procbody;

declarations =  (CONST (ident EQ expression SEMICOLON)*)?
                (TYPE (ident EQ TYPE SEMICOLON)*)?
                (VAR (identlist COLON TYPE SEMICOLON)*)?
                (PROCDECL SEMICOLON)*;

module = MODULE ident SEMICOLON declarations (BEGIN statementseq)? END ident DOT;

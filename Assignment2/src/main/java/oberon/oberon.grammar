%package "oberon";
%class "OberonParser";

%terminals IDENT, INT;
%terminals MULT, DIV, MOD, AND, PLUS, MIN, OR;
%terminals EQ, HASHTAG, LT, LEQ, GT, GEQ, DOT, COMMA, COLON, RPAREN, RBRACK;
%terminals OF, THEN, DO, LPAREN, LBRACK, COMP, ASSIGN, SEMICOLON;
%terminals END, ELSE, ELSIF, IF, WHILE;
%terminals ARRAY, RECORD, CONST, TYPE, VAR, PROC, BEGIN, MODULE;

%goal module;


selector = selectorP*;

selectorP
    = DOT IDENT
    | LBRACK expression RBRACK
    ;

factor
    = IDENT selector
    | INT
    | LPAREN expression RPAREN
    | COMP factor
    ;

term = factor termP*;

termP
    = MULT factor
    | DIV factor
    | MOD factor
    | AND factor
    ;

plusmin
    = PLUS
    | MIN
    ;

simpleexp = plusmin? term simpleexpP*;

simpleexpP
    = PLUS term
    | MIN term
    | OR term
    ;

expression = simpleexp expressionP?;

expressionP
    = EQ simpleexp
    | HASHTAG simpleexp
    | LT simpleexp
    | LEQ simpleexp
    | GT simpleexp
    | GEQ simpleexp
    ;

assignment = IDENT selector ASSIGN expression;

actualpar = LPAREN actualparP? RPAREN;

actualparP = expression actualparPP*;

actualparPP = COMMA expression;

proccall = IDENT selector actualpar?;

ifstatement = IF expression THEN statementseq elsifstatement* elsestatement? END;

elsifstatement = ELSIF expression THEN statementseq;

elsestatement = ELSE statementseq;

whilestatement = WHILE expression DO statementseq END;

statement = statementP?;

statementP
    = assignment
    | proccall
    | ifstatement
    | whilestatement
    ;

statementseq = statement statementseqP*;

statementseqP = SEMICOLON statement;

IDENTlist = IDENT IDENTlistP*;

IDENTlistP = COMMA IDENT;

arraytype = ARRAY expression OF type;

fieldlist = fieldlistP?;

fieldlistP = IDENTlist COLON type;

recordtype = RECORD fieldlist recordtypeP* END;

recordtypeP = SEMICOLON fieldlist;

type
    = IDENT
    | arraytype
    | recordtype
    ;

fpsection = VAR? IDENTlist COLON type;

formalpar = LPAREN formalparP? RPAREN;

formalparP = fpsection formalparPP*;

formalparPP = SEMICOLON fpsection;

procbody = declarations procbodyP? END IDENT;

procbodyP = BEGIN statementseq;

procdecl = PROC IDENT formalpar? SEMICOLON procbody;

declarations = declarationsM? declarationsT? declarationsV? declarationsP*;

declarationsM = CONST declarationsMP*;

declarationsMP = IDENT EQ expression SEMICOLON;

declarationsT = TYPE declarationsTP*;

declarationsTP = IDENT EQ type SEMICOLON;

declarationsV = VAR declarationsVP*;

declarationsVP = IDENTlist COLON type SEMICOLON;

declarationsP = procdecl SEMICOLON;

module = MODULE IDENT SEMICOLON declarations moduleP? END IDENT DOT;

moduleP = BEGIN statementseq;
%package "oberon";
%class "OberonParser";

%terminals LETTER, DIGIT;
%terminals MULT, DIV, MOD, AND, PLUS, MIN, OR;
%terminals EQ, HASHTAG, LT, LEQ, GT, GEQ, DOT, COMMA, COLON, RPAREN, RBRACK;
%terminals OF, THEN, DO, LPAREN, LBRACK, TILDE, ASSIGN, SEMICOLON;
%terminals END, ELSE, ELSIF, IF, WHILE;
%terminals ARRAY, RECORD, CONST, TYPE, VAR, PROCEDURE, BEGIN, MODULE;

%goal MODULE;


IDENT
    = LETTER
    | LETTER LETTER
    | LETTER DIGIT
    ;

INTEGER
    = DIGIT
    | DIGIT DIGIT
    ;

SELECTOR =
    ( DOT IDENT
    | LBRACK EXPRESSION RBRACK
    )*
    ;

NUMBER = INTEGER;

FACTOR
    = IDENT SELECTOR
    | NUMBER
    | LPAREN EXPRESSION RPAREN
    | TILDE FACTOR
    ;

TERM
    = FACTOR    ( MULT FACTOR
                | DIV FACTOR
                | MOD FACTOR
                | AND FACTOR
                )*
    ;

SIMPLEEXP = ( PLUS | MIN )? TERM ((PLUS | MIN | OR) TERM)*;

EXPRESSION = SIMPLEEXP ((EQ | HASHTAG | LT | LEQ | GT | GEQ) SIMPLEEXP)?;

ASSIGNMENT = IDENT SELECTOR ASSIGN EXPRESSION;

ACTUALPAR = LPAREN (EXPRESSION (COMMA EXPRESSION)*)? RPAREN;

PROCCALL = IDENT SELECTOR (ACTUALPAR)?;

IFSTATEMENT = IF EXPRESSION THEN STATEMENTSEQ ELSIFSTATEMENT* ELSESTATEMENT? END;

ELSIFSTATEMENT = ELSIF EXPRESSION THEN STATEMENTSEQ;

ELSESTATEMENT = ELSE STATEMENTSEQ;

WHILESTATEMENT = WHILE EXPRESSION DO STATEMENTSEQ END;

STATEMENT = (ASSIGNMENT | PROCCALL | IFSTATEMENT | WHILESTATEMENT)?;

STATEMENTSEQ = STATEMENT (SEMICOLON STATEMENT)*;

IDENTLIST = IDENT (COMMA IDENT)*;

ARRAYTYPE = ARRAY EXPRESSION OF TYPE;

FIELDLIST = (IDENTLIST COLON TYPE)?;
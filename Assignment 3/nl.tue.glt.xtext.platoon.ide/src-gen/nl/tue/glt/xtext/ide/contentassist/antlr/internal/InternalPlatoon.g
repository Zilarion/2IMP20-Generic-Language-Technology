/*
 * generated by Xtext 2.10.0
 */
grammar InternalPlatoon;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nl.tue.glt.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.tue.glt.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nl.tue.glt.xtext.services.PlatoonGrammarAccess;

}
@parser::members {
	private PlatoonGrammarAccess grammarAccess;

	public void setGrammarAccess(PlatoonGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleWorld
entryRuleWorld
:
{ before(grammarAccess.getWorldRule()); }
	 ruleWorld
{ after(grammarAccess.getWorldRule()); } 
	 EOF 
;

// Rule World
ruleWorld 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWorldAccess().getGroup()); }
		(rule__World__Group__0)
		{ after(grammarAccess.getWorldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeadingVehicle
entryRuleLeadingVehicle
:
{ before(grammarAccess.getLeadingVehicleRule()); }
	 ruleLeadingVehicle
{ after(grammarAccess.getLeadingVehicleRule()); } 
	 EOF 
;

// Rule LeadingVehicle
ruleLeadingVehicle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeadingVehicleAccess().getGroup()); }
		(rule__LeadingVehicle__Group__0)
		{ after(grammarAccess.getLeadingVehicleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFollowVehicle
entryRuleFollowVehicle
:
{ before(grammarAccess.getFollowVehicleRule()); }
	 ruleFollowVehicle
{ after(grammarAccess.getFollowVehicleRule()); } 
	 EOF 
;

// Rule FollowVehicle
ruleFollowVehicle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFollowVehicleAccess().getGroup()); }
		(rule__FollowVehicle__Group__0)
		{ after(grammarAccess.getFollowVehicleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVehicle_Impl
entryRuleVehicle_Impl
:
{ before(grammarAccess.getVehicle_ImplRule()); }
	 ruleVehicle_Impl
{ after(grammarAccess.getVehicle_ImplRule()); } 
	 EOF 
;

// Rule Vehicle_Impl
ruleVehicle_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVehicle_ImplAccess().getGroup()); }
		(rule__Vehicle_Impl__Group__0)
		{ after(grammarAccess.getVehicle_ImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand_Impl
entryRuleCommand_Impl
:
{ before(grammarAccess.getCommand_ImplRule()); }
	 ruleCommand_Impl
{ after(grammarAccess.getCommand_ImplRule()); } 
	 EOF 
;

// Rule Command_Impl
ruleCommand_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommand_ImplAccess().getCommandAction()); }
		()
		{ after(grammarAccess.getCommand_ImplAccess().getCommandAction()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForwardCommand
entryRuleForwardCommand
:
{ before(grammarAccess.getForwardCommandRule()); }
	 ruleForwardCommand
{ after(grammarAccess.getForwardCommandRule()); } 
	 EOF 
;

// Rule ForwardCommand
ruleForwardCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForwardCommandAccess().getGroup()); }
		(rule__ForwardCommand__Group__0)
		{ after(grammarAccess.getForwardCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnCommand
entryRuleTurnCommand
:
{ before(grammarAccess.getTurnCommandRule()); }
	 ruleTurnCommand
{ after(grammarAccess.getTurnCommandRule()); } 
	 EOF 
;

// Rule TurnCommand
ruleTurnCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnCommandAccess().getGroup()); }
		(rule__TurnCommand__Group__0)
		{ after(grammarAccess.getTurnCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirection_Impl
entryRuleDirection_Impl
:
{ before(grammarAccess.getDirection_ImplRule()); }
	 ruleDirection_Impl
{ after(grammarAccess.getDirection_ImplRule()); } 
	 EOF 
;

// Rule Direction_Impl
ruleDirection_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirection_ImplAccess().getDirectionAction()); }
		()
		{ after(grammarAccess.getDirection_ImplAccess().getDirectionAction()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getGroup()); }
		(rule__Left__Group__0)
		{ after(grammarAccess.getLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint_Impl
entryRuleConstraint_Impl
:
{ before(grammarAccess.getConstraint_ImplRule()); }
	 ruleConstraint_Impl
{ after(grammarAccess.getConstraint_ImplRule()); } 
	 EOF 
;

// Rule Constraint_Impl
ruleConstraint_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraint_ImplAccess().getConstraintAction()); }
		()
		{ after(grammarAccess.getConstraint_ImplAccess().getConstraintAction()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeadwayConstraint
entryRuleHeadwayConstraint
:
{ before(grammarAccess.getHeadwayConstraintRule()); }
	 ruleHeadwayConstraint
{ after(grammarAccess.getHeadwayConstraintRule()); } 
	 EOF 
;

// Rule HeadwayConstraint
ruleHeadwayConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadwayConstraintAccess().getGroup()); }
		(rule__HeadwayConstraint__Group__0)
		{ after(grammarAccess.getHeadwayConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__0__Impl
	rule__World__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorldAccess().getPlatoonAssignment_0()); }
	(rule__World__PlatoonAssignment_0)
	{ after(grammarAccess.getWorldAccess().getPlatoonAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__1__Impl
	rule__World__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorldAccess().getRouteAssignment_1()); }
	(rule__World__RouteAssignment_1)
	{ after(grammarAccess.getWorldAccess().getRouteAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorldAccess().getConstraintAssignment_2()); }
	(rule__World__ConstraintAssignment_2)
	{ after(grammarAccess.getWorldAccess().getConstraintAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeadingVehicle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeadingVehicle__Group__0__Impl
	rule__LeadingVehicle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeadingVehicleAccess().getLVKeyword_0()); }
	'LV'
	{ after(grammarAccess.getLeadingVehicleAccess().getLVKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeadingVehicle__Group__1__Impl
	rule__LeadingVehicle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeadingVehicleAccess().getIdAssignment_1()); }
	(rule__LeadingVehicle__IdAssignment_1)
	{ after(grammarAccess.getLeadingVehicleAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeadingVehicle__Group__2__Impl
	rule__LeadingVehicle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeadingVehicleAccess().getRouteKeyword_2()); }
	'route'
	{ after(grammarAccess.getLeadingVehicleAccess().getRouteKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeadingVehicle__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeadingVehicleAccess().getRouteAssignment_3()); }
	(rule__LeadingVehicle__RouteAssignment_3)
	{ after(grammarAccess.getLeadingVehicleAccess().getRouteAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FollowVehicle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__0__Impl
	rule__FollowVehicle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getFVKeyword_0()); }
	'FV'
	{ after(grammarAccess.getFollowVehicleAccess().getFVKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__1__Impl
	rule__FollowVehicle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getIdAssignment_1()); }
	(rule__FollowVehicle__IdAssignment_1)
	{ after(grammarAccess.getFollowVehicleAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__2__Impl
	rule__FollowVehicle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getFrontKeyword_2()); }
	'front'
	{ after(grammarAccess.getFollowVehicleAccess().getFrontKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__3__Impl
	rule__FollowVehicle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getRunnerKeyword_3()); }
	'runner'
	{ after(grammarAccess.getFollowVehicleAccess().getRunnerKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FollowVehicle__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFollowVehicleAccess().getFrontRunnerAssignment_4()); }
	(rule__FollowVehicle__FrontRunnerAssignment_4)
	{ after(grammarAccess.getFollowVehicleAccess().getFrontRunnerAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vehicle_Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vehicle_Impl__Group__0__Impl
	rule__Vehicle_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vehicle_Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVehicle_ImplAccess().getVehicleAction_0()); }
	()
	{ after(grammarAccess.getVehicle_ImplAccess().getVehicleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vehicle_Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vehicle_Impl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vehicle_Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVehicle_ImplAccess().getIdAssignment_1()); }
	(rule__Vehicle_Impl__IdAssignment_1)
	{ after(grammarAccess.getVehicle_ImplAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForwardCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForwardCommand__Group__0__Impl
	rule__ForwardCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardCommandAccess().getForwardKeyword_0()); }
	'forward('
	{ after(grammarAccess.getForwardCommandAccess().getForwardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForwardCommand__Group__1__Impl
	rule__ForwardCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardCommandAccess().getDistanceAssignment_1()); }
	(rule__ForwardCommand__DistanceAssignment_1)
	{ after(grammarAccess.getForwardCommandAccess().getDistanceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForwardCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardCommandAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getForwardCommandAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnCommand__Group__0__Impl
	rule__TurnCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnCommandAccess().getTurnCommandAction_0()); }
	()
	{ after(grammarAccess.getTurnCommandAccess().getTurnCommandAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnCommand__Group__1__Impl
	rule__TurnCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnCommandAccess().getTurnKeyword_1()); }
	'turn'
	{ after(grammarAccess.getTurnCommandAccess().getTurnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnCommandAccess().getDirectionAssignment_2()); }
	(rule__TurnCommand__DirectionAssignment_2)
	{ after(grammarAccess.getTurnCommandAccess().getDirectionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftAction_0()); }
	()
	{ after(grammarAccess.getLeftAccess().getLeftAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftKeyword_1()); }
	'Left'
	{ after(grammarAccess.getLeftAccess().getLeftKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightAction_0()); }
	()
	{ after(grammarAccess.getRightAccess().getRightAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightKeyword_1()); }
	'Right'
	{ after(grammarAccess.getRightAccess().getRightKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HeadwayConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeadwayConstraint__Group__0__Impl
	rule__HeadwayConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayConstraintAccess().getMinAssignment_0()); }
	(rule__HeadwayConstraint__MinAssignment_0)
	{ after(grammarAccess.getHeadwayConstraintAccess().getMinAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeadwayConstraint__Group__1__Impl
	rule__HeadwayConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayConstraintAccess().getLessThanSignEqualsSignKeyword_1()); }
	'<='
	{ after(grammarAccess.getHeadwayConstraintAccess().getLessThanSignEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeadwayConstraint__Group__2__Impl
	rule__HeadwayConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayConstraintAccess().getHeadwayKeyword_2()); }
	'headway'
	{ after(grammarAccess.getHeadwayConstraintAccess().getHeadwayKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeadwayConstraint__Group__3__Impl
	rule__HeadwayConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayConstraintAccess().getLessThanSignEqualsSignKeyword_3()); }
	'<='
	{ after(grammarAccess.getHeadwayConstraintAccess().getLessThanSignEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeadwayConstraint__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadwayConstraintAccess().getMaxAssignment_4()); }
	(rule__HeadwayConstraint__MaxAssignment_4)
	{ after(grammarAccess.getHeadwayConstraintAccess().getMaxAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__World__PlatoonAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorldAccess().getPlatoonPlatoonCrossReference_0_0()); }
		(
			{ before(grammarAccess.getWorldAccess().getPlatoonPlatoonIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getWorldAccess().getPlatoonPlatoonIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getWorldAccess().getPlatoonPlatoonCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__RouteAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorldAccess().getRouteRouteCrossReference_1_0()); }
		(
			{ before(grammarAccess.getWorldAccess().getRouteRouteIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getWorldAccess().getRouteRouteIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getWorldAccess().getRouteRouteCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__ConstraintAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorldAccess().getConstraintConstraintsCrossReference_2_0()); }
		(
			{ before(grammarAccess.getWorldAccess().getConstraintConstraintsIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getWorldAccess().getConstraintConstraintsIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getWorldAccess().getConstraintConstraintsCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeadingVehicleAccess().getIdEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getLeadingVehicleAccess().getIdEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeadingVehicle__RouteAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeadingVehicleAccess().getRouteRouteCrossReference_3_0()); }
		(
			{ before(grammarAccess.getLeadingVehicleAccess().getRouteRouteEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getLeadingVehicleAccess().getRouteRouteEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getLeadingVehicleAccess().getRouteRouteCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFollowVehicleAccess().getIdEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getFollowVehicleAccess().getIdEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FollowVehicle__FrontRunnerAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFollowVehicleAccess().getFrontRunnerVehicleCrossReference_4_0()); }
		(
			{ before(grammarAccess.getFollowVehicleAccess().getFrontRunnerVehicleEStringParserRuleCall_4_0_1()); }
			ruleEString
			{ after(grammarAccess.getFollowVehicleAccess().getFrontRunnerVehicleEStringParserRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getFollowVehicleAccess().getFrontRunnerVehicleCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vehicle_Impl__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVehicle_ImplAccess().getIdEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getVehicle_ImplAccess().getIdEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForwardCommand__DistanceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForwardCommandAccess().getDistanceEIntParserRuleCall_1_0()); }
		ruleEInt
		{ after(grammarAccess.getForwardCommandAccess().getDistanceEIntParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCommand__DirectionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnCommandAccess().getDirectionDirectionCrossReference_2_0()); }
		(
			{ before(grammarAccess.getTurnCommandAccess().getDirectionDirectionEStringParserRuleCall_2_0_1()); }
			ruleEString
			{ after(grammarAccess.getTurnCommandAccess().getDirectionDirectionEStringParserRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getTurnCommandAccess().getDirectionDirectionCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__MinAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadwayConstraintAccess().getMinEIntParserRuleCall_0_0()); }
		ruleEInt
		{ after(grammarAccess.getHeadwayConstraintAccess().getMinEIntParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadwayConstraint__MaxAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadwayConstraintAccess().getMaxEIntParserRuleCall_4_0()); }
		ruleEInt
		{ after(grammarAccess.getHeadwayConstraintAccess().getMaxEIntParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

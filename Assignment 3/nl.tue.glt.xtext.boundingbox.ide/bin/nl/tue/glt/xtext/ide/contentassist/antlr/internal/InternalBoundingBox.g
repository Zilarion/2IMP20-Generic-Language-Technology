/*
 * generated by Xtext 2.10.0
 */
grammar InternalBoundingBox;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nl.tue.glt.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.tue.glt.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nl.tue.glt.xtext.services.BoundingBoxGrammarAccess;

}
@parser::members {
	private BoundingBoxGrammarAccess grammarAccess;

	public void setGrammarAccess(BoundingBoxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleWorld
entryRuleWorld
:
{ before(grammarAccess.getWorldRule()); }
	 ruleWorld
{ after(grammarAccess.getWorldRule()); } 
	 EOF 
;

// Rule World
ruleWorld 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWorldAccess().getGroup()); }
		(rule__World__Group__0)
		{ after(grammarAccess.getWorldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMove
entryRuleMove
:
{ before(grammarAccess.getMoveRule()); }
	 ruleMove
{ after(grammarAccess.getMoveRule()); } 
	 EOF 
;

// Rule Move
ruleMove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveAccess().getGroup()); }
		(rule__Move__Group__0)
		{ after(grammarAccess.getMoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveUp
entryRuleMoveUp
:
{ before(grammarAccess.getMoveUpRule()); }
	 ruleMoveUp
{ after(grammarAccess.getMoveUpRule()); } 
	 EOF 
;

// Rule MoveUp
ruleMoveUp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveUpAccess().getGroup()); }
		(rule__MoveUp__Group__0)
		{ after(grammarAccess.getMoveUpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveDown
entryRuleMoveDown
:
{ before(grammarAccess.getMoveDownRule()); }
	 ruleMoveDown
{ after(grammarAccess.getMoveDownRule()); } 
	 EOF 
;

// Rule MoveDown
ruleMoveDown 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveDownAccess().getGroup()); }
		(rule__MoveDown__Group__0)
		{ after(grammarAccess.getMoveDownAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveLeft
entryRuleMoveLeft
:
{ before(grammarAccess.getMoveLeftRule()); }
	 ruleMoveLeft
{ after(grammarAccess.getMoveLeftRule()); } 
	 EOF 
;

// Rule MoveLeft
ruleMoveLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveLeftAccess().getGroup()); }
		(rule__MoveLeft__Group__0)
		{ after(grammarAccess.getMoveLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveRight
entryRuleMoveRight
:
{ before(grammarAccess.getMoveRightRule()); }
	 ruleMoveRight
{ after(grammarAccess.getMoveRightRule()); } 
	 EOF 
;

// Rule MoveRight
ruleMoveRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveRightAccess().getGroup()); }
		(rule__MoveRight__Group__0)
		{ after(grammarAccess.getMoveRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getMoveUpParserRuleCall_0_0()); }
		ruleMoveUp
		{ after(grammarAccess.getMoveAccess().getMoveUpParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMoveAccess().getMoveDownParserRuleCall_0_1()); }
		ruleMoveDown
		{ after(grammarAccess.getMoveAccess().getMoveDownParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMoveAccess().getMoveLeftParserRuleCall_0_2()); }
		ruleMoveLeft
		{ after(grammarAccess.getMoveAccess().getMoveLeftParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMoveAccess().getMoveRightParserRuleCall_0_3()); }
		ruleMoveRight
		{ after(grammarAccess.getMoveAccess().getMoveRightParserRuleCall_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__0__Impl
	rule__World__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorldAccess().getWorldAction_0()); }
	()
	{ after(grammarAccess.getWorldAccess().getWorldAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__1__Impl
	rule__World__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorldAccess().getBoxKeyword_1()); }
	'Box:'
	{ after(grammarAccess.getWorldAccess().getBoxKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__World__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__World__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getWorldAccess().getMoveCommandsAssignment_2()); }
		(rule__World__MoveCommandsAssignment_2)
		{ after(grammarAccess.getWorldAccess().getMoveCommandsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getWorldAccess().getMoveCommandsAssignment_2()); }
		(rule__World__MoveCommandsAssignment_2)*
		{ after(grammarAccess.getWorldAccess().getMoveCommandsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__0__Impl
	rule__Move__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getAlternatives_0()); }
	(rule__Move__Alternatives_0)
	{ after(grammarAccess.getMoveAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getDistanceAssignment_1()); }
	(rule__Move__DistanceAssignment_1)
	{ after(grammarAccess.getMoveAccess().getDistanceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveUp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveUp__Group__0__Impl
	rule__MoveUp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveUp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveUpAccess().getMoveUpAction_0()); }
	()
	{ after(grammarAccess.getMoveUpAccess().getMoveUpAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveUp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveUp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveUp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveUpAccess().getUpKeyword_1()); }
	'up'
	{ after(grammarAccess.getMoveUpAccess().getUpKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveDown__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveDown__Group__0__Impl
	rule__MoveDown__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveDown__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveDownAccess().getMoveDownAction_0()); }
	()
	{ after(grammarAccess.getMoveDownAccess().getMoveDownAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveDown__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveDown__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveDown__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveDownAccess().getDownKeyword_1()); }
	'down'
	{ after(grammarAccess.getMoveDownAccess().getDownKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveLeft__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveLeft__Group__0__Impl
	rule__MoveLeft__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveLeft__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveLeftAccess().getMoveLeftAction_0()); }
	()
	{ after(grammarAccess.getMoveLeftAccess().getMoveLeftAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveLeft__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveLeft__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveLeft__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveLeftAccess().getLeftKeyword_1()); }
	'left'
	{ after(grammarAccess.getMoveLeftAccess().getLeftKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveRight__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveRight__Group__0__Impl
	rule__MoveRight__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveRight__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveRightAccess().getMoveRightAction_0()); }
	()
	{ after(grammarAccess.getMoveRightAccess().getMoveRightAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveRight__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveRight__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveRight__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveRightAccess().getRightKeyword_1()); }
	'right'
	{ after(grammarAccess.getMoveRightAccess().getRightKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__World__MoveCommandsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorldAccess().getMoveCommandsMoveParserRuleCall_2_0()); }
		ruleMove
		{ after(grammarAccess.getWorldAccess().getMoveCommandsMoveParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__DistanceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getDistanceEIntParserRuleCall_1_0()); }
		ruleEInt
		{ after(grammarAccess.getMoveAccess().getDistanceEIntParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

// automatically generated by Xtext
grammar nl.tue.glt.xtext.Platoon with org.eclipse.xtext.common.Terminals

import "platoon" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

World returns World:
	'platoon' platoon=[Platoon|EString]
	'route' route=[Route|EString]
	('constraint' constraint=[Constraints|EString])?
	;


Command returns Command:
	Command_Impl | ForwardCommand | TurnCommand;

Constraint returns Constraint:
	Constraint_Impl | HeadwayConstraint;

Vehicle returns Vehicle:
	Vehicle_Impl | FollowVehicle | LeadingVehicle;

Direction returns Direction:
	Direction_Impl | Left | Right;

Platoon returns Platoon:
	'LV' LV=LeadingVehicle
	('FV' FV=FollowVehicle)?
	;

Route returns Route:
	'Route'
	id=EString
	'{'
		'commands' '(' commands+=[Command|EString] ( "," commands+=[Command|EString])* ')' 
	'}';

Constraints returns Constraints:
	{Constraints}
	'Constraints'
	'{'
		('constraints' '(' constraints+=[Constraint|EString] ( "," constraints+=[Constraint|EString])* ')' )?
	'}';

LeadingVehicle returns LeadingVehicle:
	id=EString
	'route' Route=[Route|EString]
	;

FollowVehicle returns FollowVehicle:
	id=EString
	'front runner' FrontRunner=[Vehicle|EString]
	;

EString returns ecore::EString:
	STRING | ID;

Vehicle_Impl returns Vehicle:
	{Vehicle}
	id=EString;

Command_Impl returns Command:
	{Command}
	;

ForwardCommand returns ForwardCommand:
	'ForwardCommand'
	'{'
		'distance' distance=EInt
	'}';

TurnCommand returns TurnCommand:
	{TurnCommand}
	'TurnCommand'
	'{'
		('direction' direction=[Direction|EString])?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Direction_Impl returns Direction:
	{Direction}
	'Direction'
	;

Left returns Left:
	{Left}
	'Left'
	;

Right returns Right:
	{Right}
	'Right'
	;

Constraint_Impl returns Constraint:
	{Constraint}
	'Constraint'
	;

HeadwayConstraint returns HeadwayConstraint:
	'HeadwayConstraint'
	'{'
		'min' min=EInt
		'max' max=EInt
	'}';

package nl.tue.glt;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import org.eclipse.epsilon.common.util.UriUtil;
import org.eclipse.epsilon.egl.EglFileGeneratingTemplate;
import org.eclipse.epsilon.egl.EglFileGeneratingTemplateFactory;
import org.eclipse.epsilon.egl.exceptions.EglRuntimeException;
import org.eclipse.epsilon.egl.status.StatusMessage;
import org.eclipse.epsilon.egl.traceability.OutputFile;
import org.eclipse.epsilon.egl.traceability.Template;
import org.eclipse.epsilon.emc.emf.EmfModel;
import org.eclipse.epsilon.eol.exceptions.models.EolModelLoadingException;
import org.eclipse.epsilon.eol.execute.context.Variable;
import nl.tue.glt.egl.Egl;
import nl.tue.glt.util.FileUtil;
import nl.tue.glt.util.GraphVizUtil;

public class EglDocFacade {
	
	private static final String FILE_SEP = System.getProperty("file.separator");
	private static final String MOF2_URI = "http://www.eclipse.org/emf/2002/Ecore";
	
	private final EglFileGeneratingTemplateFactory factory = new EglFileGeneratingTemplateFactory();
	
	private final String pathToBoundingBox;
	
	public EglDocFacade(String pathToBoundingBox) {
		this.pathToBoundingBox = pathToBoundingBox;
	}
	
	private void loadModel(String modelName, File modelFile) throws EolModelLoadingException {
		final EmfModel model = new EmfModel();
		model.setModelFile(modelFile.getAbsolutePath());
		model.setName(modelName);
		model.setMetamodelUri(MOF2_URI);
		model.setMetamodelFileBased(false);
		
		model.load();
		factory.getContext().getModelRepository().addModel(model);
	}
	
	public void generate(File model, String outputDirPath) throws IOException, EglRuntimeException, EolModelLoadingException, URISyntaxException {			
		final String metaModelName = model.getName().contains(".") ?
		                             model.getName().substring(0, model.getName().lastIndexOf(".")) : 
		                             model.getName();
		final URI  outputDirUri = UriUtil.fileToUri(new File(outputDirPath));
		final File outputDir    = new File(outputDirUri);
		
		System.out.println("Generating bounding box calculator for " + metaModelName);
		
		// Set directory from which nested templates will be loaded
		factory.setTemplateRoot(Egl.getBase().toString());

		// Load model
		loadModel("OO", model);
		
		// Generate Java
		factory.getContext().getFrameStack().put(Variable.createReadOnlyVariable("metaModelName", metaModelName));
		factory.getContext().getFrameStack().put(Variable.createReadOnlyVariable("outputDir", outputDirUri));
		
		final EglFileGeneratingTemplate template = (EglFileGeneratingTemplate)factory.load(Egl.getToJava());
		template.process();

		System.out.println("DONE!");
		
		for (StatusMessage message : factory.getContext().getStatusMessages())
			System.out.println(message);
		
		final OutputFile of = (OutputFile)template.getChildren().get(0);
	}
}

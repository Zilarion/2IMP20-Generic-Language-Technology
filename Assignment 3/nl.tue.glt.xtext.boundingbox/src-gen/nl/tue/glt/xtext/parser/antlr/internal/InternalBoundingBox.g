/*
 * generated by Xtext 2.10.0
 */
grammar InternalBoundingBox;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.tue.glt.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.tue.glt.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.tue.glt.xtext.services.BoundingBoxGrammarAccess;

}

@parser::members {

 	private BoundingBoxGrammarAccess grammarAccess;

    public InternalBoundingBoxParser(TokenStream input, BoundingBoxGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "World";
   	}

   	@Override
   	protected BoundingBoxGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWorld
entryRuleWorld returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorldRule()); }
	iv_ruleWorld=ruleWorld
	{ $current=$iv_ruleWorld.current; }
	EOF;

// Rule World
ruleWorld returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWorldAccess().getWorldAction_0(),
					$current);
			}
		)
		otherlv_1='Box:'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorldAccess().getBoxKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorldAccess().getMoveCommandsMoveParserRuleCall_2_0());
				}
				lv_moveCommands_2_0=ruleMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorldRule());
					}
					add(
						$current,
						"moveCommands",
						lv_moveCommands_2_0,
						"nl.tue.glt.xtext.BoundingBox.Move");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMoveAccess().getMoveUpParserRuleCall_0_0());
			}
			this_MoveUp_0=ruleMoveUp
			{
				$current = $this_MoveUp_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getMoveAccess().getMoveDownParserRuleCall_0_1());
			}
			this_MoveDown_1=ruleMoveDown
			{
				$current = $this_MoveDown_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getMoveAccess().getMoveLeftParserRuleCall_0_2());
			}
			this_MoveLeft_2=ruleMoveLeft
			{
				$current = $this_MoveLeft_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getMoveAccess().getMoveRightParserRuleCall_0_3());
			}
			this_MoveRight_3=ruleMoveRight
			{
				$current = $this_MoveRight_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getDistanceEIntParserRuleCall_1_0());
				}
				lv_distance_4_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"distance",
						lv_distance_4_0,
						"nl.tue.glt.xtext.BoundingBox.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMoveUp
entryRuleMoveUp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveUpRule()); }
	iv_ruleMoveUp=ruleMoveUp
	{ $current=$iv_ruleMoveUp.current; }
	EOF;

// Rule MoveUp
ruleMoveUp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMoveUpAccess().getMoveUpAction_0(),
					$current);
			}
		)
		otherlv_1='up'
		{
			newLeafNode(otherlv_1, grammarAccess.getMoveUpAccess().getUpKeyword_1());
		}
	)
;

// Entry rule entryRuleMoveDown
entryRuleMoveDown returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveDownRule()); }
	iv_ruleMoveDown=ruleMoveDown
	{ $current=$iv_ruleMoveDown.current; }
	EOF;

// Rule MoveDown
ruleMoveDown returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMoveDownAccess().getMoveDownAction_0(),
					$current);
			}
		)
		otherlv_1='down'
		{
			newLeafNode(otherlv_1, grammarAccess.getMoveDownAccess().getDownKeyword_1());
		}
	)
;

// Entry rule entryRuleMoveLeft
entryRuleMoveLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveLeftRule()); }
	iv_ruleMoveLeft=ruleMoveLeft
	{ $current=$iv_ruleMoveLeft.current; }
	EOF;

// Rule MoveLeft
ruleMoveLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMoveLeftAccess().getMoveLeftAction_0(),
					$current);
			}
		)
		otherlv_1='left'
		{
			newLeafNode(otherlv_1, grammarAccess.getMoveLeftAccess().getLeftKeyword_1());
		}
	)
;

// Entry rule entryRuleMoveRight
entryRuleMoveRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRightRule()); }
	iv_ruleMoveRight=ruleMoveRight
	{ $current=$iv_ruleMoveRight.current; }
	EOF;

// Rule MoveRight
ruleMoveRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMoveRightAccess().getMoveRightAction_0(),
					$current);
			}
		)
		otherlv_1='right'
		{
			newLeafNode(otherlv_1, grammarAccess.getMoveRightAccess().getRightKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

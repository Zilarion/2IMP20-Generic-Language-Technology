/*
 * generated by Xtext 2.10.0
 */
package nl.tue.glt.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PlatoonGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WorldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.World");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorldAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPlatoonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlatoonPlatoonParserRuleCall_1_0 = (RuleCall)cPlatoonAssignment_1.eContents().get(0);
		private final Assignment cRouteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRouteRouteParserRuleCall_2_0 = (RuleCall)cRouteAssignment_2.eContents().get(0);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsConstraintsParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		
		//World:
		//	{World} platoon=Platoon
		//	route=Route
		//	constraints=Constraints;
		@Override public ParserRule getRule() { return rule; }
		
		//{World} platoon=Platoon route=Route constraints=Constraints
		public Group getGroup() { return cGroup; }
		
		//{World}
		public Action getWorldAction_0() { return cWorldAction_0; }
		
		//platoon=Platoon
		public Assignment getPlatoonAssignment_1() { return cPlatoonAssignment_1; }
		
		//Platoon
		public RuleCall getPlatoonPlatoonParserRuleCall_1_0() { return cPlatoonPlatoonParserRuleCall_1_0; }
		
		//route=Route
		public Assignment getRouteAssignment_2() { return cRouteAssignment_2; }
		
		//Route
		public RuleCall getRouteRouteParserRuleCall_2_0() { return cRouteRouteParserRuleCall_2_0; }
		
		//constraints=Constraints
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_3_0() { return cConstraintsConstraintsParserRuleCall_3_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForwardCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Command:
		//	ForwardCommand | TurnCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//ForwardCommand | TurnCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ForwardCommand
		public RuleCall getForwardCommandParserRuleCall_0() { return cForwardCommandParserRuleCall_0; }
		
		//TurnCommand
		public RuleCall getTurnCommandParserRuleCall_1() { return cTurnCommandParserRuleCall_1; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.Constraint");
		private final RuleCall cHeadwayConstraintParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Constraint:
		//	HeadwayConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//HeadwayConstraint
		public RuleCall getHeadwayConstraintParserRuleCall() { return cHeadwayConstraintParserRuleCall; }
	}
	public class VehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.Vehicle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFollowVehicleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeadingVehicleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Vehicle:
		//	FollowVehicle | LeadingVehicle;
		@Override public ParserRule getRule() { return rule; }
		
		//FollowVehicle | LeadingVehicle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FollowVehicle
		public RuleCall getFollowVehicleParserRuleCall_0() { return cFollowVehicleParserRuleCall_0; }
		
		//LeadingVehicle
		public RuleCall getLeadingVehicleParserRuleCall_1() { return cLeadingVehicleParserRuleCall_1; }
	}
	public class PlatoonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.Platoon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlatoonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlatoonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLVAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLVLeadingVehicleParserRuleCall_3_0 = (RuleCall)cLVAssignment_3.eContents().get(0);
		private final Assignment cFVAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFVFollowVehicleParserRuleCall_4_0 = (RuleCall)cFVAssignment_4.eContents().get(0);
		
		//Platoon:
		//	{Platoon}
		//	'platoon' ':'
		//	LV=LeadingVehicle
		//	FV+=FollowVehicle?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Platoon} 'platoon' ':' LV=LeadingVehicle FV+=FollowVehicle?
		public Group getGroup() { return cGroup; }
		
		//{Platoon}
		public Action getPlatoonAction_0() { return cPlatoonAction_0; }
		
		//'platoon'
		public Keyword getPlatoonKeyword_1() { return cPlatoonKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//LV=LeadingVehicle
		public Assignment getLVAssignment_3() { return cLVAssignment_3; }
		
		//LeadingVehicle
		public RuleCall getLVLeadingVehicleParserRuleCall_3_0() { return cLVLeadingVehicleParserRuleCall_3_0; }
		
		//FV+=FollowVehicle?
		public Assignment getFVAssignment_4() { return cFVAssignment_4; }
		
		//FollowVehicle
		public RuleCall getFVFollowVehicleParserRuleCall_4_0() { return cFVFollowVehicleParserRuleCall_4_0; }
	}
	public class RouteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.Route");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRouteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRouteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdEStringParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCommandsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommandsCommandParserRuleCall_4_0 = (RuleCall)cCommandsAssignment_4.eContents().get(0);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsCommandParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		
		//Route:
		//	{Route}
		//	'route' id=EString ':'
		//	commands+=Command commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Route} 'route' id=EString ':' commands+=Command commands+=Command*
		public Group getGroup() { return cGroup; }
		
		//{Route}
		public Action getRouteAction_0() { return cRouteAction_0; }
		
		//'route'
		public Keyword getRouteKeyword_1() { return cRouteKeyword_1; }
		
		//id=EString
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_2_0() { return cIdEStringParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_4() { return cCommandsAssignment_4; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_4_0() { return cCommandsCommandParserRuleCall_4_0; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_5_0() { return cCommandsCommandParserRuleCall_5_0; }
	}
	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.Constraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		
		//Constraints:
		//	'constraints' ':'
		//	constraints+=Constraint constraints+=Constraint*;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraints' ':' constraints+=Constraint constraints+=Constraint*
		public Group getGroup() { return cGroup; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//constraints+=Constraint
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_2_0() { return cConstraintsConstraintParserRuleCall_2_0; }
		
		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_0() { return cConstraintsConstraintParserRuleCall_3_0; }
	}
	public class LeadingVehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.LeadingVehicle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeadingVehicleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLVKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdEStringParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cRouteKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRouteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRouteRouteCrossReference_4_0 = (CrossReference)cRouteAssignment_4.eContents().get(0);
		private final RuleCall cRouteRouteEStringParserRuleCall_4_0_1 = (RuleCall)cRouteRouteCrossReference_4_0.eContents().get(1);
		
		//LeadingVehicle:
		//	{LeadingVehicle}
		//	'LV' id=EString 'route' route=[Route|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{LeadingVehicle} 'LV' id=EString 'route' route=[Route|EString]
		public Group getGroup() { return cGroup; }
		
		//{LeadingVehicle}
		public Action getLeadingVehicleAction_0() { return cLeadingVehicleAction_0; }
		
		//'LV'
		public Keyword getLVKeyword_1() { return cLVKeyword_1; }
		
		//id=EString
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_2_0() { return cIdEStringParserRuleCall_2_0; }
		
		//'route'
		public Keyword getRouteKeyword_3() { return cRouteKeyword_3; }
		
		//route=[Route|EString]
		public Assignment getRouteAssignment_4() { return cRouteAssignment_4; }
		
		//[Route|EString]
		public CrossReference getRouteRouteCrossReference_4_0() { return cRouteRouteCrossReference_4_0; }
		
		//EString
		public RuleCall getRouteRouteEStringParserRuleCall_4_0_1() { return cRouteRouteEStringParserRuleCall_4_0_1; }
	}
	public class FollowVehicleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.FollowVehicle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFollowVehicleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFVKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdEStringParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cFrontKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRunnerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFollowsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFollowsVehicleCrossReference_5_0 = (CrossReference)cFollowsAssignment_5.eContents().get(0);
		private final RuleCall cFollowsVehicleEStringParserRuleCall_5_0_1 = (RuleCall)cFollowsVehicleCrossReference_5_0.eContents().get(1);
		
		//FollowVehicle:
		//	{FollowVehicle}
		//	'FV' id=EString 'front' 'runner' follows=[Vehicle|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{FollowVehicle} 'FV' id=EString 'front' 'runner' follows=[Vehicle|EString]
		public Group getGroup() { return cGroup; }
		
		//{FollowVehicle}
		public Action getFollowVehicleAction_0() { return cFollowVehicleAction_0; }
		
		//'FV'
		public Keyword getFVKeyword_1() { return cFVKeyword_1; }
		
		//id=EString
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//EString
		public RuleCall getIdEStringParserRuleCall_2_0() { return cIdEStringParserRuleCall_2_0; }
		
		//'front'
		public Keyword getFrontKeyword_3() { return cFrontKeyword_3; }
		
		//'runner'
		public Keyword getRunnerKeyword_4() { return cRunnerKeyword_4; }
		
		//follows=[Vehicle|EString]
		public Assignment getFollowsAssignment_5() { return cFollowsAssignment_5; }
		
		//[Vehicle|EString]
		public CrossReference getFollowsVehicleCrossReference_5_0() { return cFollowsVehicleCrossReference_5_0; }
		
		//EString
		public RuleCall getFollowsVehicleEStringParserRuleCall_5_0_1() { return cFollowsVehicleEStringParserRuleCall_5_0_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ForwardCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.ForwardCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForwardCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceINTTerminalRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForwardCommand:
		//	{ForwardCommand}
		//	'forward' '(' distance=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ForwardCommand} 'forward' '(' distance=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{ForwardCommand}
		public Action getForwardCommandAction_0() { return cForwardCommandAction_0; }
		
		//'forward'
		public Keyword getForwardKeyword_1() { return cForwardKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//distance=INT
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_3_0() { return cDistanceINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TurnCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.TurnCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionDirectionParserRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		
		//TurnCommand:
		//	{TurnCommand}
		//	'turn'
		//	direction=Direction;
		@Override public ParserRule getRule() { return rule; }
		
		//{TurnCommand} 'turn' direction=Direction
		public Group getGroup() { return cGroup; }
		
		//{TurnCommand}
		public Action getTurnCommandAction_0() { return cTurnCommandAction_0; }
		
		//'turn'
		public Keyword getTurnKeyword_1() { return cTurnKeyword_1; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }
		
		//Direction
		public RuleCall getDirectionDirectionParserRuleCall_2_0() { return cDirectionDirectionParserRuleCall_2_0; }
	}
	public class DirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRightKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Direction:
		//	'Left' | 'Right';
		@Override public ParserRule getRule() { return rule; }
		
		//'Left' | 'Right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//'Right'
		public Keyword getRightKeyword_1() { return cRightKeyword_1; }
	}
	public class HeadwayConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.glt.xtext.Platoon.HeadwayConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeadwayConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinINTTerminalRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHeadwayKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxINTTerminalRuleCall_5_0 = (RuleCall)cMaxAssignment_5.eContents().get(0);
		
		//HeadwayConstraint:
		//	{HeadwayConstraint} min=INT '<=' 'headway' '<=' max=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{HeadwayConstraint} min=INT '<=' 'headway' '<=' max=INT
		public Group getGroup() { return cGroup; }
		
		//{HeadwayConstraint}
		public Action getHeadwayConstraintAction_0() { return cHeadwayConstraintAction_0; }
		
		//min=INT
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_1_0() { return cMinINTTerminalRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'headway'
		public Keyword getHeadwayKeyword_3() { return cHeadwayKeyword_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
		
		//max=INT
		public Assignment getMaxAssignment_5() { return cMaxAssignment_5; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_5_0() { return cMaxINTTerminalRuleCall_5_0; }
	}
	
	
	private final WorldElements pWorld;
	private final CommandElements pCommand;
	private final ConstraintElements pConstraint;
	private final VehicleElements pVehicle;
	private final PlatoonElements pPlatoon;
	private final RouteElements pRoute;
	private final ConstraintsElements pConstraints;
	private final LeadingVehicleElements pLeadingVehicle;
	private final FollowVehicleElements pFollowVehicle;
	private final EStringElements pEString;
	private final ForwardCommandElements pForwardCommand;
	private final TurnCommandElements pTurnCommand;
	private final DirectionElements pDirection;
	private final HeadwayConstraintElements pHeadwayConstraint;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PlatoonGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorld = new WorldElements();
		this.pCommand = new CommandElements();
		this.pConstraint = new ConstraintElements();
		this.pVehicle = new VehicleElements();
		this.pPlatoon = new PlatoonElements();
		this.pRoute = new RouteElements();
		this.pConstraints = new ConstraintsElements();
		this.pLeadingVehicle = new LeadingVehicleElements();
		this.pFollowVehicle = new FollowVehicleElements();
		this.pEString = new EStringElements();
		this.pForwardCommand = new ForwardCommandElements();
		this.pTurnCommand = new TurnCommandElements();
		this.pDirection = new DirectionElements();
		this.pHeadwayConstraint = new HeadwayConstraintElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.tue.glt.xtext.Platoon".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//World:
	//	{World} platoon=Platoon
	//	route=Route
	//	constraints=Constraints;
	public WorldElements getWorldAccess() {
		return pWorld;
	}
	
	public ParserRule getWorldRule() {
		return getWorldAccess().getRule();
	}
	
	//Command:
	//	ForwardCommand | TurnCommand;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Constraint:
	//	HeadwayConstraint;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Vehicle:
	//	FollowVehicle | LeadingVehicle;
	public VehicleElements getVehicleAccess() {
		return pVehicle;
	}
	
	public ParserRule getVehicleRule() {
		return getVehicleAccess().getRule();
	}
	
	//Platoon:
	//	{Platoon}
	//	'platoon' ':'
	//	LV=LeadingVehicle
	//	FV+=FollowVehicle?;
	public PlatoonElements getPlatoonAccess() {
		return pPlatoon;
	}
	
	public ParserRule getPlatoonRule() {
		return getPlatoonAccess().getRule();
	}
	
	//Route:
	//	{Route}
	//	'route' id=EString ':'
	//	commands+=Command commands+=Command*;
	public RouteElements getRouteAccess() {
		return pRoute;
	}
	
	public ParserRule getRouteRule() {
		return getRouteAccess().getRule();
	}
	
	//Constraints:
	//	'constraints' ':'
	//	constraints+=Constraint constraints+=Constraint*;
	public ConstraintsElements getConstraintsAccess() {
		return pConstraints;
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}
	
	//LeadingVehicle:
	//	{LeadingVehicle}
	//	'LV' id=EString 'route' route=[Route|EString];
	public LeadingVehicleElements getLeadingVehicleAccess() {
		return pLeadingVehicle;
	}
	
	public ParserRule getLeadingVehicleRule() {
		return getLeadingVehicleAccess().getRule();
	}
	
	//FollowVehicle:
	//	{FollowVehicle}
	//	'FV' id=EString 'front' 'runner' follows=[Vehicle|EString];
	public FollowVehicleElements getFollowVehicleAccess() {
		return pFollowVehicle;
	}
	
	public ParserRule getFollowVehicleRule() {
		return getFollowVehicleAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//ForwardCommand:
	//	{ForwardCommand}
	//	'forward' '(' distance=INT ')';
	public ForwardCommandElements getForwardCommandAccess() {
		return pForwardCommand;
	}
	
	public ParserRule getForwardCommandRule() {
		return getForwardCommandAccess().getRule();
	}
	
	//TurnCommand:
	//	{TurnCommand}
	//	'turn'
	//	direction=Direction;
	public TurnCommandElements getTurnCommandAccess() {
		return pTurnCommand;
	}
	
	public ParserRule getTurnCommandRule() {
		return getTurnCommandAccess().getRule();
	}
	
	//Direction:
	//	'Left' | 'Right';
	public DirectionElements getDirectionAccess() {
		return pDirection;
	}
	
	public ParserRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//HeadwayConstraint:
	//	{HeadwayConstraint} min=INT '<=' 'headway' '<=' max=INT;
	public HeadwayConstraintElements getHeadwayConstraintAccess() {
		return pHeadwayConstraint;
	}
	
	public ParserRule getHeadwayConstraintRule() {
		return getHeadwayConstraintAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.10.0
 */
package nl.tue.glt.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.tue.glt.xtext.services.PlatoonGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import platoon.Command;
import platoon.Constraint;
import platoon.Constraints;
import platoon.Direction;
import platoon.FollowVehicle;
import platoon.ForwardCommand;
import platoon.HeadwayConstraint;
import platoon.LeadingVehicle;
import platoon.Left;
import platoon.Platoon;
import platoon.PlatoonPackage;
import platoon.Right;
import platoon.Route;
import platoon.TurnCommand;
import platoon.Vehicle;
import platoon.World;

@SuppressWarnings("all")
public class PlatoonSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PlatoonGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PlatoonPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PlatoonPackage.COMMAND:
				sequence_Command_Impl(context, (Command) semanticObject); 
				return; 
			case PlatoonPackage.CONSTRAINT:
				sequence_Constraint_Impl(context, (Constraint) semanticObject); 
				return; 
			case PlatoonPackage.CONSTRAINTS:
				sequence_Constraints(context, (Constraints) semanticObject); 
				return; 
			case PlatoonPackage.DIRECTION:
				sequence_Direction_Impl(context, (Direction) semanticObject); 
				return; 
			case PlatoonPackage.FOLLOW_VEHICLE:
				sequence_FollowVehicle(context, (FollowVehicle) semanticObject); 
				return; 
			case PlatoonPackage.FORWARD_COMMAND:
				sequence_ForwardCommand(context, (ForwardCommand) semanticObject); 
				return; 
			case PlatoonPackage.HEADWAY_CONSTRAINT:
				sequence_HeadwayConstraint(context, (HeadwayConstraint) semanticObject); 
				return; 
			case PlatoonPackage.LEADING_VEHICLE:
				sequence_LeadingVehicle(context, (LeadingVehicle) semanticObject); 
				return; 
			case PlatoonPackage.LEFT:
				sequence_Left(context, (Left) semanticObject); 
				return; 
			case PlatoonPackage.PLATOON:
				sequence_Platoon(context, (Platoon) semanticObject); 
				return; 
			case PlatoonPackage.RIGHT:
				sequence_Right(context, (Right) semanticObject); 
				return; 
			case PlatoonPackage.ROUTE:
				sequence_Route(context, (Route) semanticObject); 
				return; 
			case PlatoonPackage.TURN_COMMAND:
				sequence_TurnCommand(context, (TurnCommand) semanticObject); 
				return; 
			case PlatoonPackage.VEHICLE:
				sequence_Vehicle_Impl(context, (Vehicle) semanticObject); 
				return; 
			case PlatoonPackage.WORLD:
				sequence_World(context, (World) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *     Command_Impl returns Command
	 *
	 * Constraint:
	 *     {Command}
	 */
	protected void sequence_Command_Impl(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns Constraint
	 *     Constraint_Impl returns Constraint
	 *
	 * Constraint:
	 *     {Constraint}
	 */
	protected void sequence_Constraint_Impl(ISerializationContext context, Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraints returns Constraints
	 *
	 * Constraint:
	 *     (constraints+=[Constraint|EString] constraints+=[Constraint|EString]*)
	 */
	protected void sequence_Constraints(ISerializationContext context, Constraints semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Direction returns Direction
	 *     Direction_Impl returns Direction
	 *
	 * Constraint:
	 *     {Direction}
	 */
	protected void sequence_Direction_Impl(ISerializationContext context, Direction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Vehicle returns FollowVehicle
	 *     FollowVehicle returns FollowVehicle
	 *
	 * Constraint:
	 *     (id=EString FrontRunner=[Vehicle|EString])
	 */
	protected void sequence_FollowVehicle(ISerializationContext context, FollowVehicle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.VEHICLE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.VEHICLE__ID));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.FOLLOW_VEHICLE__FRONT_RUNNER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.FOLLOW_VEHICLE__FRONT_RUNNER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFollowVehicleAccess().getIdEStringParserRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getFollowVehicleAccess().getFrontRunnerVehicleEStringParserRuleCall_4_0_1(), semanticObject.getFrontRunner());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns ForwardCommand
	 *     ForwardCommand returns ForwardCommand
	 *
	 * Constraint:
	 *     distance=EInt
	 */
	protected void sequence_ForwardCommand(ISerializationContext context, ForwardCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.FORWARD_COMMAND__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.FORWARD_COMMAND__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForwardCommandAccess().getDistanceEIntParserRuleCall_1_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns HeadwayConstraint
	 *     HeadwayConstraint returns HeadwayConstraint
	 *
	 * Constraint:
	 *     (min=EInt max=EInt)
	 */
	protected void sequence_HeadwayConstraint(ISerializationContext context, HeadwayConstraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.HEADWAY_CONSTRAINT__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.HEADWAY_CONSTRAINT__MIN));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.HEADWAY_CONSTRAINT__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.HEADWAY_CONSTRAINT__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeadwayConstraintAccess().getMinEIntParserRuleCall_0_0(), semanticObject.getMin());
		feeder.accept(grammarAccess.getHeadwayConstraintAccess().getMaxEIntParserRuleCall_4_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vehicle returns LeadingVehicle
	 *     LeadingVehicle returns LeadingVehicle
	 *
	 * Constraint:
	 *     (id=EString Route=[Route|EString])
	 */
	protected void sequence_LeadingVehicle(ISerializationContext context, LeadingVehicle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.VEHICLE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.VEHICLE__ID));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.LEADING_VEHICLE__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.LEADING_VEHICLE__ROUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeadingVehicleAccess().getIdEStringParserRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getLeadingVehicleAccess().getRouteRouteEStringParserRuleCall_3_0_1(), semanticObject.getRoute());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Direction returns Left
	 *     Left returns Left
	 *
	 * Constraint:
	 *     {Left}
	 */
	protected void sequence_Left(ISerializationContext context, Left semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Platoon returns Platoon
	 *
	 * Constraint:
	 *     (LV=LeadingVehicle FV=FollowVehicle?)
	 */
	protected void sequence_Platoon(ISerializationContext context, Platoon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Direction returns Right
	 *     Right returns Right
	 *
	 * Constraint:
	 *     {Right}
	 */
	protected void sequence_Right(ISerializationContext context, Right semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Route returns Route
	 *
	 * Constraint:
	 *     (id=EString commands+=[Command|EString] commands+=[Command|EString]*)
	 */
	protected void sequence_Route(ISerializationContext context, Route semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns TurnCommand
	 *     TurnCommand returns TurnCommand
	 *
	 * Constraint:
	 *     direction=[Direction|EString]
	 */
	protected void sequence_TurnCommand(ISerializationContext context, TurnCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.TURN_COMMAND__DIRECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.TURN_COMMAND__DIRECTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTurnCommandAccess().getDirectionDirectionEStringParserRuleCall_2_0_1(), semanticObject.getDirection());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vehicle returns Vehicle
	 *     Vehicle_Impl returns Vehicle
	 *
	 * Constraint:
	 *     id=EString
	 */
	protected void sequence_Vehicle_Impl(ISerializationContext context, Vehicle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.VEHICLE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.VEHICLE__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVehicle_ImplAccess().getIdEStringParserRuleCall_1_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     World returns World
	 *
	 * Constraint:
	 *     (platoon=[Platoon|ID] route=[Route|ID] constraint=[Constraints|ID])
	 */
	protected void sequence_World(ISerializationContext context, World semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.WORLD__PLATOON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.WORLD__PLATOON));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.WORLD__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.WORLD__ROUTE));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.WORLD__CONSTRAINT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.WORLD__CONSTRAINT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorldAccess().getPlatoonPlatoonIDTerminalRuleCall_0_0_1(), semanticObject.getPlatoon());
		feeder.accept(grammarAccess.getWorldAccess().getRouteRouteIDTerminalRuleCall_1_0_1(), semanticObject.getRoute());
		feeder.accept(grammarAccess.getWorldAccess().getConstraintConstraintsIDTerminalRuleCall_2_0_1(), semanticObject.getConstraint());
		feeder.finish();
	}
	
	
}

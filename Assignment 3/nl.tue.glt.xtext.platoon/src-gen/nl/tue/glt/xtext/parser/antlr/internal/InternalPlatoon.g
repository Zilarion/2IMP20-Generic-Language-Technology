/*
 * generated by Xtext 2.10.0
 */
grammar InternalPlatoon;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.tue.glt.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.tue.glt.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.tue.glt.xtext.services.PlatoonGrammarAccess;

}

@parser::members {

 	private PlatoonGrammarAccess grammarAccess;

    public InternalPlatoonParser(TokenStream input, PlatoonGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "World";
   	}

   	@Override
   	protected PlatoonGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWorld
entryRuleWorld returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorldRule()); }
	iv_ruleWorld=ruleWorld
	{ $current=$iv_ruleWorld.current; }
	EOF;

// Rule World
ruleWorld returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorldRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getWorldAccess().getPlatoonPlatoonCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorldRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getWorldAccess().getRouteRouteCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorldRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getWorldAccess().getConstraintConstraintsCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleLeadingVehicle
entryRuleLeadingVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeadingVehicleRule()); }
	iv_ruleLeadingVehicle=ruleLeadingVehicle
	{ $current=$iv_ruleLeadingVehicle.current; }
	EOF;

// Rule LeadingVehicle
ruleLeadingVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LV'
		{
			newLeafNode(otherlv_0, grammarAccess.getLeadingVehicleAccess().getLVKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeadingVehicleAccess().getIdEStringParserRuleCall_1_0());
				}
				lv_id_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeadingVehicleRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"nl.tue.glt.xtext.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='route'
		{
			newLeafNode(otherlv_2, grammarAccess.getLeadingVehicleAccess().getRouteKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeadingVehicleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLeadingVehicleAccess().getRouteRouteCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFollowVehicle
entryRuleFollowVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFollowVehicleRule()); }
	iv_ruleFollowVehicle=ruleFollowVehicle
	{ $current=$iv_ruleFollowVehicle.current; }
	EOF;

// Rule FollowVehicle
ruleFollowVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FV'
		{
			newLeafNode(otherlv_0, grammarAccess.getFollowVehicleAccess().getFVKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFollowVehicleAccess().getIdEStringParserRuleCall_1_0());
				}
				lv_id_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFollowVehicleRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"nl.tue.glt.xtext.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='front'
		{
			newLeafNode(otherlv_2, grammarAccess.getFollowVehicleAccess().getFrontKeyword_2());
		}
		otherlv_3='runner'
		{
			newLeafNode(otherlv_3, grammarAccess.getFollowVehicleAccess().getRunnerKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFollowVehicleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFollowVehicleAccess().getFrontRunnerVehicleCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleVehicle_Impl
entryRuleVehicle_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVehicle_ImplRule()); }
	iv_ruleVehicle_Impl=ruleVehicle_Impl
	{ $current=$iv_ruleVehicle_Impl.current; }
	EOF;

// Rule Vehicle_Impl
ruleVehicle_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVehicle_ImplAccess().getVehicleAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVehicle_ImplAccess().getIdEStringParserRuleCall_1_0());
				}
				lv_id_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVehicle_ImplRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"nl.tue.glt.xtext.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommand_Impl
entryRuleCommand_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommand_ImplRule()); }
	iv_ruleCommand_Impl=ruleCommand_Impl
	{ $current=$iv_ruleCommand_Impl.current; }
	EOF;

// Rule Command_Impl
ruleCommand_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			$current = forceCreateModelElement(
				grammarAccess.getCommand_ImplAccess().getCommandAction(),
				$current);
		}
	)
;

// Entry rule entryRuleForwardCommand
entryRuleForwardCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardCommandRule()); }
	iv_ruleForwardCommand=ruleForwardCommand
	{ $current=$iv_ruleForwardCommand.current; }
	EOF;

// Rule ForwardCommand
ruleForwardCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='forward('
		{
			newLeafNode(otherlv_0, grammarAccess.getForwardCommandAccess().getForwardKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForwardCommandAccess().getDistanceEIntParserRuleCall_1_0());
				}
				lv_distance_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForwardCommandRule());
					}
					set(
						$current,
						"distance",
						lv_distance_1_0,
						"nl.tue.glt.xtext.Platoon.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getForwardCommandAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleTurnCommand
entryRuleTurnCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnCommandRule()); }
	iv_ruleTurnCommand=ruleTurnCommand
	{ $current=$iv_ruleTurnCommand.current; }
	EOF;

// Rule TurnCommand
ruleTurnCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnCommandAccess().getTurnCommandAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnCommandAccess().getTurnKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTurnCommandRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTurnCommandAccess().getDirectionDirectionCrossReference_2_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleDirection_Impl
entryRuleDirection_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirection_ImplRule()); }
	iv_ruleDirection_Impl=ruleDirection_Impl
	{ $current=$iv_ruleDirection_Impl.current; }
	EOF;

// Rule Direction_Impl
ruleDirection_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			$current = forceCreateModelElement(
				grammarAccess.getDirection_ImplAccess().getDirectionAction(),
				$current);
		}
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeftAccess().getLeftAction_0(),
					$current);
			}
		)
		otherlv_1='Left'
		{
			newLeafNode(otherlv_1, grammarAccess.getLeftAccess().getLeftKeyword_1());
		}
	)
;

// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	iv_ruleRight=ruleRight
	{ $current=$iv_ruleRight.current; }
	EOF;

// Rule Right
ruleRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRightAccess().getRightAction_0(),
					$current);
			}
		)
		otherlv_1='Right'
		{
			newLeafNode(otherlv_1, grammarAccess.getRightAccess().getRightKeyword_1());
		}
	)
;

// Entry rule entryRuleConstraint_Impl
entryRuleConstraint_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraint_ImplRule()); }
	iv_ruleConstraint_Impl=ruleConstraint_Impl
	{ $current=$iv_ruleConstraint_Impl.current; }
	EOF;

// Rule Constraint_Impl
ruleConstraint_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			$current = forceCreateModelElement(
				grammarAccess.getConstraint_ImplAccess().getConstraintAction(),
				$current);
		}
	)
;

// Entry rule entryRuleHeadwayConstraint
entryRuleHeadwayConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeadwayConstraintRule()); }
	iv_ruleHeadwayConstraint=ruleHeadwayConstraint
	{ $current=$iv_ruleHeadwayConstraint.current; }
	EOF;

// Rule HeadwayConstraint
ruleHeadwayConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadwayConstraintAccess().getMinEIntParserRuleCall_0_0());
				}
				lv_min_0_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadwayConstraintRule());
					}
					set(
						$current,
						"min",
						lv_min_0_0,
						"nl.tue.glt.xtext.Platoon.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='<='
		{
			newLeafNode(otherlv_1, grammarAccess.getHeadwayConstraintAccess().getLessThanSignEqualsSignKeyword_1());
		}
		otherlv_2='headway'
		{
			newLeafNode(otherlv_2, grammarAccess.getHeadwayConstraintAccess().getHeadwayKeyword_2());
		}
		otherlv_3='<='
		{
			newLeafNode(otherlv_3, grammarAccess.getHeadwayConstraintAccess().getLessThanSignEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeadwayConstraintAccess().getMaxEIntParserRuleCall_4_0());
				}
				lv_max_4_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeadwayConstraintRule());
					}
					set(
						$current,
						"max",
						lv_max_4_0,
						"nl.tue.glt.xtext.Platoon.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.10.0
 */
grammar InternalPlatoon;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nl.tue.glt.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.tue.glt.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nl.tue.glt.xtext.services.PlatoonGrammarAccess;

}

@parser::members {

 	private PlatoonGrammarAccess grammarAccess;

    public InternalPlatoonParser(TokenStream input, PlatoonGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "World";
   	}

   	@Override
   	protected PlatoonGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWorld
entryRuleWorld returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorldRule()); }
	iv_ruleWorld=ruleWorld
	{ $current=$iv_ruleWorld.current; }
	EOF;

// Rule World
ruleWorld returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWorldAccess().getWorldAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorldAccess().getPlatoonPlatoonParserRuleCall_1_0());
				}
				lv_platoon_1_0=rulePlatoon
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorldRule());
					}
					set(
						$current,
						"platoon",
						lv_platoon_1_0,
						"nl.tue.glt.xtext.Platoon.Platoon");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorldAccess().getRouteRouteParserRuleCall_2_0());
				}
				lv_route_2_0=ruleRoute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorldRule());
					}
					set(
						$current,
						"route",
						lv_route_2_0,
						"nl.tue.glt.xtext.Platoon.Route");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorldAccess().getConstraintsConstraintsParserRuleCall_3_0());
				}
				lv_constraints_3_0=ruleConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorldRule());
					}
					set(
						$current,
						"constraints",
						lv_constraints_3_0,
						"nl.tue.glt.xtext.Platoon.Constraints");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getForwardCommandParserRuleCall_0());
		}
		this_ForwardCommand_0=ruleForwardCommand
		{
			$current = $this_ForwardCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getTurnCommandParserRuleCall_1());
		}
		this_TurnCommand_1=ruleTurnCommand
		{
			$current = $this_TurnCommand_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstraintAccess().getHeadwayConstraintParserRuleCall());
	}
	this_HeadwayConstraint_0=ruleHeadwayConstraint
	{
		$current = $this_HeadwayConstraint_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePlatoon
entryRulePlatoon returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlatoonRule()); }
	iv_rulePlatoon=rulePlatoon
	{ $current=$iv_rulePlatoon.current; }
	EOF;

// Rule Platoon
rulePlatoon returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPlatoonAccess().getPlatoonAction_0(),
					$current);
			}
		)
		otherlv_1='platoon'
		{
			newLeafNode(otherlv_1, grammarAccess.getPlatoonAccess().getPlatoonKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPlatoonAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlatoonAccess().getLVLeadingVehicleParserRuleCall_3_0());
				}
				lv_LV_3_0=ruleLeadingVehicle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlatoonRule());
					}
					set(
						$current,
						"LV",
						lv_LV_3_0,
						"nl.tue.glt.xtext.Platoon.LeadingVehicle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPlatoonAccess().getFVFollowVehicleParserRuleCall_4_0());
				}
				lv_FV_4_0=ruleFollowVehicle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlatoonRule());
					}
					add(
						$current,
						"FV",
						lv_FV_4_0,
						"nl.tue.glt.xtext.Platoon.FollowVehicle");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRoute
entryRuleRoute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRouteRule()); }
	iv_ruleRoute=ruleRoute
	{ $current=$iv_ruleRoute.current; }
	EOF;

// Rule Route
ruleRoute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRouteAccess().getRouteAction_0(),
					$current);
			}
		)
		otherlv_1='route'
		{
			newLeafNode(otherlv_1, grammarAccess.getRouteAccess().getRouteKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"nl.tue.glt.xtext.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getRouteAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getCommandsCommandParserRuleCall_4_0());
				}
				lv_commands_4_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					add(
						$current,
						"commands",
						lv_commands_4_0,
						"nl.tue.glt.xtext.Platoon.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getCommandsCommandParserRuleCall_5_0());
				}
				lv_commands_5_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					add(
						$current,
						"commands",
						lv_commands_5_0,
						"nl.tue.glt.xtext.Platoon.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstraints
entryRuleConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintsRule()); }
	iv_ruleConstraints=ruleConstraints
	{ $current=$iv_ruleConstraints.current; }
	EOF;

// Rule Constraints
ruleConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraints'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintsAccess().getConstraintsKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstraintsAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsAccess().getConstraintsConstraintParserRuleCall_2_0());
				}
				lv_constraints_2_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_2_0,
						"nl.tue.glt.xtext.Platoon.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsAccess().getConstraintsConstraintParserRuleCall_3_0());
				}
				lv_constraints_3_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_3_0,
						"nl.tue.glt.xtext.Platoon.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLeadingVehicle
entryRuleLeadingVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeadingVehicleRule()); }
	iv_ruleLeadingVehicle=ruleLeadingVehicle
	{ $current=$iv_ruleLeadingVehicle.current; }
	EOF;

// Rule LeadingVehicle
ruleLeadingVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeadingVehicleAccess().getLeadingVehicleAction_0(),
					$current);
			}
		)
		otherlv_1='LV'
		{
			newLeafNode(otherlv_1, grammarAccess.getLeadingVehicleAccess().getLVKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeadingVehicleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeadingVehicleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"nl.tue.glt.xtext.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='route'
		{
			newLeafNode(otherlv_3, grammarAccess.getLeadingVehicleAccess().getRouteKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeadingVehicleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLeadingVehicleAccess().getRouteRouteCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFollowVehicle
entryRuleFollowVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFollowVehicleRule()); }
	iv_ruleFollowVehicle=ruleFollowVehicle
	{ $current=$iv_ruleFollowVehicle.current; }
	EOF;

// Rule FollowVehicle
ruleFollowVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFollowVehicleAccess().getFollowVehicleAction_0(),
					$current);
			}
		)
		otherlv_1='FV'
		{
			newLeafNode(otherlv_1, grammarAccess.getFollowVehicleAccess().getFVKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFollowVehicleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFollowVehicleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"nl.tue.glt.xtext.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='front'
		{
			newLeafNode(otherlv_3, grammarAccess.getFollowVehicleAccess().getFrontKeyword_3());
		}
		otherlv_4='runner'
		{
			newLeafNode(otherlv_4, grammarAccess.getFollowVehicleAccess().getRunnerKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFollowVehicleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFollowVehicleAccess().getFollowsVehicleCrossReference_5_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleForwardCommand
entryRuleForwardCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardCommandRule()); }
	iv_ruleForwardCommand=ruleForwardCommand
	{ $current=$iv_ruleForwardCommand.current; }
	EOF;

// Rule ForwardCommand
ruleForwardCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForwardCommandAccess().getForwardCommandAction_0(),
					$current);
			}
		)
		otherlv_1='forward'
		{
			newLeafNode(otherlv_1, grammarAccess.getForwardCommandAccess().getForwardKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getForwardCommandAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_distance_3_0=RULE_INT
				{
					newLeafNode(lv_distance_3_0, grammarAccess.getForwardCommandAccess().getDistanceINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForwardCommandRule());
					}
					setWithLastConsumed(
						$current,
						"distance",
						lv_distance_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getForwardCommandAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleTurnCommand
entryRuleTurnCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnCommandRule()); }
	iv_ruleTurnCommand=ruleTurnCommand
	{ $current=$iv_ruleTurnCommand.current; }
	EOF;

// Rule TurnCommand
ruleTurnCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnCommandAccess().getTurnCommandAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnCommandAccess().getTurnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTurnCommandAccess().getDirectionDirectionParserRuleCall_2_0());
				}
				lv_direction_2_0=ruleDirection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTurnCommandRule());
					}
					set(
						$current,
						"direction",
						lv_direction_2_0,
						"nl.tue.glt.xtext.Platoon.Direction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDirection
entryRuleDirection returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDirectionRule()); }
	iv_ruleDirection=ruleDirection
	{ $current=$iv_ruleDirection.current.getText(); }
	EOF;

// Rule Direction
ruleDirection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Left'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDirectionAccess().getLeftKeyword_0());
		}
		    |
		kw='Right'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDirectionAccess().getRightKeyword_1());
		}
	)
;

// Entry rule entryRuleHeadwayConstraint
entryRuleHeadwayConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeadwayConstraintRule()); }
	iv_ruleHeadwayConstraint=ruleHeadwayConstraint
	{ $current=$iv_ruleHeadwayConstraint.current; }
	EOF;

// Rule HeadwayConstraint
ruleHeadwayConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHeadwayConstraintAccess().getHeadwayConstraintAction_0(),
					$current);
			}
		)
		(
			(
				lv_min_1_0=RULE_INT
				{
					newLeafNode(lv_min_1_0, grammarAccess.getHeadwayConstraintAccess().getMinINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHeadwayConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"min",
						lv_min_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='<='
		{
			newLeafNode(otherlv_2, grammarAccess.getHeadwayConstraintAccess().getLessThanSignEqualsSignKeyword_2());
		}
		otherlv_3='headway'
		{
			newLeafNode(otherlv_3, grammarAccess.getHeadwayConstraintAccess().getHeadwayKeyword_3());
		}
		otherlv_4='<='
		{
			newLeafNode(otherlv_4, grammarAccess.getHeadwayConstraintAccess().getLessThanSignEqualsSignKeyword_4());
		}
		(
			(
				lv_max_5_0=RULE_INT
				{
					newLeafNode(lv_max_5_0, grammarAccess.getHeadwayConstraintAccess().getMaxINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHeadwayConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"max",
						lv_max_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
